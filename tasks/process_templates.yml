---
# tasks file for template processing
- name: "getting latest argo release"
  shell: curl --silent "https://api.github.com/repos/argoproj/argo/releases/latest" | jq -r .tag_name
  args:
    warn: false
  register: command_output
  when: ref is not defined

- name: "setting fact for latest argo release"
  set_fact: latest="{{ command_output.stdout }}"
  when: ref is not defined

- name: "setting fact for argo url"
  set_fact: argo_url="https://raw.githubusercontent.com/argoproj/argo/{{ ref|default(latest) }}/manifests/namespace-install.yaml"

# root directory for k8s files
- name: "setting fact for k8s template directory"
  set_fact: k8s_root="{{ role_path }}/files"

# kubernetes deployment templates and overlays
- name: "setting facts for k8s template subdirectories"
  set_fact:
    k8s_base: "{{ k8s_root }}/base"
    k8s_patch: "{{ k8s_root }}/patch"
    k8s_overlays: "{{ k8s_root }}/overlays"

- name: "make sure directories for kubernetes templates exist"
  shell: |
    pushd {{ role_path }}/templates/
    find . -type d -exec mkdir -p -- {{ k8s_root }}/{} \;
    popd

- name: "get argo"
  get_url:
    url: "{{ argo_url }}"
    dest: "{{ k8s_base }}"

- name: "process artifact repository secrets template"
  template:
    src: "{{ role_path }}/templates/secrets/secrets.yaml"
    dest: "{{ k8s_base }}"
  when: artifactRepository == "s3"

- name: "find all base templates"
  find:
    paths: "{{ role_path }}/templates/base/"
    file_type: file
    patterns:
      - '*.yaml'
      - '*.yml'
    excludes:
      - 'kustomization*'
    recurse: true
  register: base_templates

- name: "process base templates"
  template:
    src: "{{ item.path }}"
    dest: "{{ k8s_base }}"
  with_items: "{{ base_templates.files }}"

- name: "find all patch templates"
  find:
    paths: "{{ role_path }}/templates/patch/"
    file_type: file
    patterns:
      - '*.yaml'
      - '*.yml'
    excludes:
      - 'kustomization*'
    recurse: true
  register: patch_templates

- name: "process patch templates"
  template:
    src: "{{ item.path }}"
    dest: "{{ k8s_patch }}"
  with_items: "{{ patch_templates.files }}"

- name: "find all overlay templates"
  find:
    paths: "{{ role_path }}/templates/overlays/{{ overlay }}/"
    file_type: file
    patterns:
      - '*.yaml'
      - '*.yml'
    excludes:
      - 'kustomization*'
    recurse: true
  register: overlay_templates
  when: overlay | length

- name: "process overlay templates"
  template:
    src: "{{ item.path }}"
    dest: "{{ k8s_overlays }}/{{ item.path | relpath( role_path + '/templates/overlays/' ) }}"
  with_items: "{{ overlay_templates.files }}"
  when: overlay | length

- name: "find all patches"
  find:
    paths: "{{ k8s_patch }}"
    file_type: file
    patterns:
      - '*.yaml'
      - '*.yml'
    recurse: true
  register: patches

- name: "verify that patches were found successfully"
  assert:
    that:
    - patches.matched != 0
    fail_msg: "No patches have been found."

- name: "find all resources"
  find:
    paths: "{{ k8s_base }}"
    file_type: file
    patterns:
      - '*.yaml'
      - '*.yml'
    recurse: true
  register: resources

- name: "verify that resources were found successfully"
  assert:
    that:
    - resources.matched != 0
    fail_msg: "No resources have been found."

- name: "find all overlays"
  find:
    paths: "{{ k8s_overlays }}"
    file_type: file
    patterns:
      - '*.yaml'
      - '*.yml'
    recurse: true
  register: overlays

- name: "verify that overlays were found successfully"
  assert:
    that:
    - overlays.matched != 0
    fail_msg: "No overlays have been found."

- name: "find all kustomization templates"
  find:
    paths: "{{ role_path }}/templates/"
    file_type: file
    patterns:
      - 'kustomization.yaml'
      - 'kustomization.yml'
      - 'kustomization'
    recurse: true
  register: kustomization_templates

- name: "verify that kustomization templates were found successfully"
  assert:
    that:
    - kustomization_templates.matched != 0
    fail_msg: "No kustomization templates have been found."

- name: "process kustomization templates"
  template:
    src: "{{ item.path }}"
    dest: "{{ k8s_root }}/{{ item.path | relpath( role_path + '/templates/' ) }}"
  with_items: "{{ kustomization_templates.files }}"
